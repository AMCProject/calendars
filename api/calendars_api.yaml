openapi: 3.0.3
info:
  title: Calendars API
  description: Calendars OpenAPI endpoints
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3300
    description: Local
tags:
  - name: Calendars
    description: Operations about Calendars
  - name: RedoCalendar
    description: Operation to Redo the Calendar
paths:

  /user/{user_id}/calendar:
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      tags:
        - Calendars
      summary: Create user's Calendar
      operationId: PostCalendar
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - Calendars
      summary: Get user's Calendar
      operationId: GetCalendar
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Calendars
      summary: Update user's Calendar
      operationId: PutCalendar
      requestBody:
        description: 'Body to update a Calendar'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Calendars
      summary: Delete Calendar
      operationId: DeleteCalendar
      responses:
        204:
          description: The user was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /user/{user_id}/redo:
    parameters:
      - $ref: '#/components/parameters/userId'
    put :
      tags:
        - RedoCalendar
      summary: Redo user's Calendar
      operationId: RedoCalendar
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /user/{user_id}/redoweek:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      tags:
        - RedoCalendar
      summary: Redo user's Calendar days selected
      operationId: RedoCalendar
      requestBody:
        description: 'Body to update days of the Calendar randomly'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDaysCalendar'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    CalendarRequest:
      title: Calendar Request
      type: object
      properties:
        meal_id:
          type: string
          example: 01H2GSKFZT6EKPJCMCZZAF5VV5
        date:
          type: string
          example: 26/05/2023
    CalendarBody:
      title: Calendar Response
      type: object
      properties:
        name:
          type: string
          example: pizza
        date:
          type: string
          example: 26/05/2023
    CalendarResponse:
      type: array
      items:
        $ref: '#/components/schemas/CalendarBody'
      example:
        - user_id: 01H00Q44V18CKXHMY7FEJ2876S
          meal_id: 01H2G2C5NP5JHRW46A137YPE8F
          date: 09/06/2023
          name: pizza
        - user_id: 01H00Q44V18CKXHMY7FEJ2876S
          meal_id: 01H2GF5GEZSA2ACGRRA5G5B1C2
          date: 10/06/2023
          name: salad
        - user_id: 01H00Q44V18CKXHMY7FEJ2876S
          meal_id: 01H2G2CRMZJM2SJASEAT3CZEGM
          date: 11/06/2023
          name: rice with chicken
        - user_id: 01H00Q44V18CKXHMY7FEJ2876S
          meal_id: 01H2GD5P7GW3REQ3XTHTJD6RPS
          date: 12/06/2023
          name: spaghetti with pesto
        - user_id: 01H00Q44V18CKXHMY7FEJ2876S
          meal_id: 01H2GSKFZT6EKPJCMCZZAF5VV5
          date: 13/06/2023
          name: burritos
    UpdateDaysCalendar:
      title: Update Days Calendar
      type: object
      properties:
        from:
          type: string
          example: 19/05/2023
        to:
          type: string
          example: 26/05/2023
    ErrorResponse:
      title: Error Response
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: integer
              format: int64
              example: 400
            message:
              type: string
              example: invalid id

  parameters:
    userId:
      in: path
      name: id
      required: true
      schema:
        type: string
        example: 01H00Q44V18CKXHMY7FEJ2876S
  responses:
    BadRequest:
      description: Payload format error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 400
              message: malformed body
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 404
              message: Not found
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 409
              message: Conflict
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 500
              message: Internal Server Error